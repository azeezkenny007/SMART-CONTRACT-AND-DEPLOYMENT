const ethers = require("ethers");
const fs = require("fs");
require("dotenv").config();

//HTTP://127.0.0.1:7545

async function main() {
  //  console.log("hi");
  //  let variable = 5;
  //  console.log(variable);

  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);

  console.log(process.env.PRIVATE_KEY);

  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

  // const encryptedJson=fs.readFileSync('./.encryptedKey.json',"utf8");

  // let wallet= new ethers.Wallet.fromEncryptedJsonSync(encryptedJson,process.env.PRIVATE_KEY_PASSWORD);

  // wallet= await wallet.connect(provider);



  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  );
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  console.log("deploying contrct please wait!!!!");
  const contract = await contractFactory.deploy();
  const deploymentRecepts = await contract.deployTransaction.wait(1);
  // console.log(deploymentRecepts);
  // console.log(contract);
  // console.log(contract.deployTransaction);

  console.log("let's send only with transaction data!!!");
  console.log(`contract address: ${contract.address}`)

  const nonceNumber = await wallet.getTransactionCount();

  //tx-transaction
  // const tx = {
  //   nonce: nonceNumber,
  //   gasPrice: 20000000000,
  //   gasLimit: 1000000,
  //   to: null,
  //   value: 0,
  //   data: "0x608060405234801561001057600080fd5b5061090d806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636f760f411161005b5780636f760f41146100ed578063c09b1cc314610109578063dc27896c1461013a578063e48312591461016a5761007d565b8063092a1820146100825780632e64cec1146100b35780636057361d146100d1575b600080fd5b61009c60048036038101906100979190610609565b610186565b6040516100aa9291906106e1565b60405180910390f35b6100bb610242565b6040516100c891906106c6565b60405180910390f35b6100eb60048036038101906100e69190610609565b61024b565b005b610107600480360381019061010291906105ad565b610255565b005b610123600480360381019061011e9190610609565b6102e5565b6040516101319291906106e1565b60405180910390f35b610154600480360381019061014f9190610564565b6103a1565b60405161016191906106c6565b60405180910390f35b610184600480360381019061017f91906105ad565b6103cf565b005b6003818154811061019657600080fd5b90600052602060002090600202016000915090508060000154908060010180546101bf906107da565b80601f01602080910402602001604051908101604052809291908181526020018280546101eb906107da565b80156102385780601f1061020d57610100808354040283529160200191610238565b820191906000526020600020905b81548152906001019060200180831161021b57829003601f168201915b5050505050905082565b60008054905090565b8060008190555050565b600360405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906102bb92919061043c565b505050806001836040516102cf91906106af565b9081526020016040518091039020819055505050565b600281815481106102f557600080fd5b906000526020600020906002020160009150905080600001549080600101805461031e906107da565b80601f016020809104026020016040519081016040528092919081815260200182805461034a906107da565b80156103975780601f1061036c57610100808354040283529160200191610397565b820191906000526020600020905b81548152906001019060200180831161037a57829003601f168201915b5050505050905082565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6002604051806040016040528083815260200184815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101908051906020019061043592919061043c565b5050505050565b828054610448906107da565b90600052602060002090601f01602090048101928261046a57600085556104b1565b82601f1061048357805160ff19168380011785556104b1565b828001600101855582156104b1579182015b828111156104b0578251825591602001919060010190610495565b5b5090506104be91906104c2565b5090565b5b808211156104db5760008160009055506001016104c3565b5090565b60006104f26104ed84610736565b610711565b90508281526020810184848401111561050e5761050d6108a0565b5b610519848285610798565b509392505050565b600082601f8301126105365761053561089b565b5b81356105468482602086016104df565b91505092915050565b60008135905061055e816108c0565b92915050565b60006020828403121561057a576105796108aa565b5b600082013567ffffffffffffffff811115610598576105976108a5565b5b6105a484828501610521565b91505092915050565b600080604083850312156105c4576105c36108aa565b5b600083013567ffffffffffffffff8111156105e2576105e16108a5565b5b6105ee85828601610521565b92505060206105ff8582860161054f565b9150509250929050565b60006020828403121561061f5761061e6108aa565b5b600061062d8482850161054f565b91505092915050565b600061064182610767565b61064b8185610772565b935061065b8185602086016107a7565b610664816108af565b840191505092915050565b600061067a82610767565b6106848185610783565b93506106948185602086016107a7565b80840191505092915050565b6106a98161078e565b82525050565b60006106bb828461066f565b915081905092915050565b60006020820190506106db60008301846106a0565b92915050565b60006040820190506106f660008301856106a0565b81810360208301526107088184610636565b90509392505050565b600061071b61072c565b9050610727828261080c565b919050565b6000604051905090565b600067ffffffffffffffff8211156107515761075061086c565b5b61075a826108af565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156107c55780820151818401526020810190506107aa565b838111156107d4576000848401525b50505050565b600060028204905060018216806107f257607f821691505b602082108114156108065761080561083d565b5b50919050565b610815826108af565b810181811067ffffffffffffffff821117156108345761083361086c565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6108c98161078e565b81146108d457600080fd5b5056fea264697066735822122016b2e0e8fd9f83b99a4c7600de969d2c941bb48dfcc48911b823c59eaf8c2b3264736f6c63430008070033",
  //   chainId: 1337,

  // };

  // // const signedtxTransaction= await wallet.signTransaction(tx);
  // // console.log(signedtxTransaction);

  // const sendtxTransaction= await wallet.sendTransaction(tx);
  // await sendtxTransaction.wait(1);
  // console.log(sendtxTransaction);

  const currentFavoriteNumber = await contract.retrieve();
  console.log(`current favorite number: ${currentFavoriteNumber.toString()}`);
  const transactionResponse = await contract.store("7");
  const transactionReceipts = await transactionResponse.wait(1);
  const updatedFavoriteNumber = await contract.retrieve();
  const unibenKofaNumber= await contract.unibenKofa("18");
  const checkKofaNumber= await contract.checKofa();
  console.log("let's check uniben kofa number");
  console.log(`check kofa number: ${checkKofaNumber}`);
  console.log('This is a string object');
  console.log(`unibenKofa Number:${unibenKofaNumber.toString()}`);
  console.log(`printing out the updated favorite number : ${updatedFavoriteNumber}`);
}

main()
  .then(() => process.exit(0))
  .catch((e) => {
    console.log(e);
    process.exit(1);
  });
